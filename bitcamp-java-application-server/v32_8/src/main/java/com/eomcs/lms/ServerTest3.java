/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.eomcs.lms;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.List;
import com.eomcs.lms.domain.Board;

public class ServerTest3 {

  static ObjectOutputStream out;
  static ObjectInputStream in;

  public static void main(String[] args) throws Exception {
    System.out.println("[Add or Drop class management Server Application Test!]");

    try (Socket socket = new Socket("192.168.43.153", 8888);
        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream())) {
      ObjectInputStream in = new ObjectInputStream(socket.getInputStream());

      // 서버와의 입출력을 위해 스트림 객체를 준비한다.
      System.out.println("Connect to server");

      ServerTest3.in = in;
      ServerTest3.out = out;

      // 서버에 전송할 객체를 준비한다.
      Board board = new Board();
      board.setNo(1);
      board.setContents("okok");

      if (!add(board)) {
        error();
      }

      board = new Board();
      board.setNo(2);
      board.setContents("okok2");

      System.out.println("------------------------------");
      if (!add(board)) {
        error();
      }

      System.out.println("------------------------------");
      if (!list()) {
        error();
      }
      
      System.out.println("------------------------------");
      if (!delete()) {
        error();
      }

      System.out.println("------------------------------");
      if (!list()) {
        error();
      }

      System.out.println("------------------------------");
      if (!detail()) {
        error();
      }

      System.out.println("------------------------------");
      board = new Board();
      board.setNo(1);
      board.setContents("오호라라ㅏㅏㅏㅏㅏ 변경");

      if (!update(board)) {
        error();
      }

      System.out.println("------------------------------");
      if (!list()) {
        error();
      }

      System.out.println("------------------------------");
      if (!quit()) {
        error();
      }

    } catch (RequestException e) {
      // 서버에서 요청 처리에 실패했다면
      // 서버가 보낸 이유를 받는다.
      System.out.printf("오류: %s\n", in.readUTF());
    } catch (IOException e) {

      // 예외가 발생하면 일단 어디에서 예외가 발생했는지 확인하기 위해 호출 정보를 모두 출력한다.
      e.printStackTrace();
    }

    System.out.println("Disconnect");
  }

  private static void error() throws Exception {
    System.out.printf("오류: %s\n", in.readUTF());

  }

  private static boolean quit() throws IOException, RequestException {
    // 서버가 처리할 수 없는 명령어 보내기
    out.writeUTF("quit");
    // 상대방한테 보내고싶으면 반드시 flush() 해야함 **
    out.flush();
    System.out.println("quit 요청함 => ");

    if (!in.readUTF().equals("ok"))
      return false;
    System.out.println("처리완료!");
    return true;
  }

  private static boolean add(Board m) throws Exception {
    out.writeUTF("/board/add");
    out.writeObject(m);
    // 서버에 객체를 전송한다.
    out.flush();
    System.out.print("add 요청함 => ");

    if (!in.readUTF().equals("ok"))
      return false;
    System.out.println("처리완료!");
    return true;
  }

  private static boolean list() throws Exception {

    out.writeUTF("/board/list");
    out.flush();
    System.out.println("list 요청함 =>");

    if (!in.readUTF().equals("ok"))
      return false;
    System.out.println("처리완료!");

    @SuppressWarnings("unchecked")
    List<Board> list = (List<Board>) in.readObject();
    System.out.println("---------------------------");
    for (Board obj : list) {
      System.out.println(obj);
    }
    return true;
  }

  private static boolean delete() throws Exception {
    // 서버가 처리할 수 없는 명령어 보내기
    out.writeUTF("/board/delete");
    // 삭제할 맴버의 번호
    out.writeInt(2);
    out.flush();
    System.out.println("delete 요청함 => ");

    if (!in.readUTF().equals("ok"))
      return false;
    System.out.println("처리완료!");
    return true;
  }

  private static boolean detail() throws Exception {
    out.writeUTF("/board/detail");
    out.writeInt(1);
    out.flush();
    System.out.println("detail 요청함 => ");

    if (!in.readUTF().equals("ok"))
      return false;

    System.out.println("처리완료!");
    System.out.println(in.readObject());
    return true;
  }

  private static boolean update(Board obj) throws Exception {
    // 서버가 처리할 수 없는 명령어 보내기
    out.writeUTF("/board/update");

    out.writeObject(obj);
    out.flush();
    System.out.println("update 요청함 => ");

    if (!in.readUTF().equals("ok"))
      return false;

    System.out.println("처리완료!");
    return true;
  }
}


